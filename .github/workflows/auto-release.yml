name: Automatic GitHub Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"

# Définition des permissions nécessaires pour le workflow
permissions:
  contents: write # Pour créer des tags et des releases
  actions: read # Pour lire les actions du workflow
  checks: write # Pour écrire des résultats de test
  id-token: write # Nécessaire pour l'authentification des releases

jobs:
  check_merge_from_dev:
    runs-on: ubuntu-latest
    outputs:
      is_merge_from_dev: ${{ steps.check_merge.outputs.is_merge_from_dev }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if commit is a merge from dev to main
        id: check_merge
        run: |
          # Vérifiez le message du dernier commit
          LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Message du dernier commit: $LATEST_COMMIT_MSG"

          # Vérifie également si c'est un merge en général
          IS_MERGE=$(git log -1 --pretty=format:"%p" | wc -w)

          # Définir des patterns plus larges pour détecter le merge de dev vers main
          if [[ "$LATEST_COMMIT_MSG" == *"dev"* && "$LATEST_COMMIT_MSG" == *"main"* ]] || 
             [[ "$LATEST_COMMIT_MSG" == *"Merge"* && "$IS_MERGE" -gt 1 ]]; then
            echo "Détecté comme un merge de dev vers main"
            echo "is_merge_from_dev=true" >> $GITHUB_OUTPUT
          else
            echo "Non détecté comme un merge de dev vers main"
            echo "is_merge_from_dev=false" >> $GITHUB_OUTPUT
          fi

      # Toujours extraire la version, quelle que soit l'origine du commit
      - name: Extract version from pubspec.yaml
        id: get_version
        run: |
          # Assurez-vous que le fichier existe et afficher son contenu pour le débogage
          if [ -f "pubspec.yaml" ]; then
            echo "Fichier pubspec.yaml trouvé"
            echo "Premiers 20 lignes du pubspec.yaml:"
            head -n 20 pubspec.yaml
            
            # Extraire la version avec différentes méthodes pour plus de robustesse
            VERSION=$(grep -m 1 "version:" pubspec.yaml | awk '{print $2}' | tr -d '"'"'" | cut -d '+' -f1)
            
            # Vérifier si la version a été extraite correctement
            if [ -n "$VERSION" ]; then
              echo "Version extraite avec succès: $VERSION"
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            else
              # Méthode de secours pour l'extraction de version
              echo "Échec de la première méthode d'extraction, essai d'une méthode alternative"
              VERSION=$(sed -n 's/^version: //p' pubspec.yaml | tr -d '"'"'" | cut -d '+' -f1)
              
              if [ -n "$VERSION" ]; then
                echo "Version extraite avec méthode alternative: $VERSION"
                echo "version=$VERSION" >> $GITHUB_OUTPUT
              else
                # Définir une version par défaut en cas d'échec
                VERSION="1.0.0"
                echo "Impossible d'extraire la version, utilisation de la valeur par défaut: $VERSION"
                echo "version=$VERSION" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "ERREUR: Le fichier pubspec.yaml n'a pas été trouvé!"
            echo "Contenu du répertoire actuel:"
            ls -la
            # Définir une version par défaut
            VERSION="1.0.0"
            echo "Utilisation de la version par défaut: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

  create_release:
    needs: check_merge_from_dev
    # Exécute la création de release si c'est un merge de dev vers main ou si le workflow a été déclenché manuellement
    if: needs.check_merge_from_dev.outputs.is_merge_from_dev == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.0"
          channel: "stable"

      - name: Display Flutter & Dart versions
        run: |
          flutter --version
          dart --version
          echo "Vérification de la configuration du projet..."

      # Modification temporaire du pubspec.yaml pour la compatibilité
      - name: Ajuster les dépendances pour la compatibilité
        run: |
          # Sauvegarder le pubspec.yaml original
          cp pubspec.yaml pubspec.yaml.bak

          # Ajuster les versions des dépendances pour être compatibles avec la version de Flutter utilisée
          sed -i 's/flutter_lints: \^5.0.0/flutter_lints: \^2.0.0/' pubspec.yaml
          sed -i 's/cupertino_icons: \^1.0.8/cupertino_icons: \^1.0.2/' pubspec.yaml
          sed -i 's/uuid: \^4.4.1/uuid: \^3.0.7/' pubspec.yaml
          sed -i 's/provider: \^6.1.2/provider: \^6.0.5/' pubspec.yaml
          sed -i 's/flutter_launcher_icons: \^0.14.0/flutter_launcher_icons: \^0.13.1/' pubspec.yaml

          # Modifier l'environnement SDK pour être compatible avec Flutter 3.19.0
          sed -i "s/sdk: '>=2.19.0 <4.0.0'/sdk: '>=3.2.0 <4.0.0'/" pubspec.yaml

          # Afficher le contenu modifié
          echo "Contenu du pubspec.yaml modifié:"
          cat pubspec.yaml

      - name: Fix ColorScheme in main.dart
        run: |
          echo "Correction du ColorScheme dans main.dart pour ajouter les paramètres requis..."
          # Vérifier si les paramètres background et onBackground sont déjà présents
          if ! grep -q "background:" lib/main.dart || ! grep -q "onBackground:" lib/main.dart; then
            # Sauvegarder le fichier original
            cp lib/main.dart lib/main.dart.bak
            
            # Ajouter les paramètres manquants au ColorScheme
            sed -i '/surface: AppColors.beigeLight,/a\\          background: AppColors.beigeLight,\n          onBackground: Colors.black87,' lib/main.dart
            
            echo "ColorScheme mis à jour avec les paramètres requis."
            grep -A 15 "colorScheme:" lib/main.dart
          else
            echo "ColorScheme semble déjà contenir les paramètres requis."
          fi

      - name: Install dependencies
        run: flutter pub get

      - name: Fix Android project structure
        run: |
          echo "Mise à jour de la structure du projet Android pour la compatibilité"

          # Sauvegarde du code et des ressources existants
          echo "Sauvegarde des fichiers importants..."
          mkdir -p /tmp/backup
          cp -r lib /tmp/backup/
          cp -r assets /tmp/backup/
          cp pubspec.yaml /tmp/backup/

          # Créer un nouveau projet temporaire avec la structure correcte
          echo "Création d'un nouveau projet Flutter avec la structure à jour..."
          cd ..
          flutter create --project-name food_guess --org com.example.foodguess temporary_project

          # Restaurer les fichiers de l'ancien projet dans le nouveau
          echo "Restauration du code et des ressources dans le nouveau projet..."
          rm -rf temporary_project/lib
          cp -r /tmp/backup/lib temporary_project/
          cp -r /tmp/backup/assets temporary_project/
          cp /tmp/backup/pubspec.yaml temporary_project/

          # Remplacer l'ancien projet par le nouveau
          echo "Remplacement de l'ancien projet par le nouveau..."
          cp -r temporary_project/android/* food_guess/android/

          # Revenir au dossier du projet
          cd food_guess

          echo "Structure du projet Android mise à jour"
          ls -la android/

      - name: Update Android configuration
        run: |
          echo "Mise à jour de la configuration Android"

          # Assurer la compatibilité des fichiers de configuration
          echo "android.useAndroidX=true" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties

          # Vérifier que le fichier AndroidManifest.xml existe et contient l'embedding v2
          if [ -f "android/app/src/main/AndroidManifest.xml" ]; then
            echo "AndroidManifest.xml trouvé, vérification de la configuration d'embedding..."
            
            # Assurer que le fichier contient la métadonnée flutterEmbedding
            if ! grep -q "flutterEmbedding" android/app/src/main/AndroidManifest.xml; then
              echo "Ajout de la métadonnée flutterEmbedding..."
              sed -i '/<\/application>/i \        <meta-data android:name="flutterEmbedding" android:value="2" \/>' android/app/src/main/AndroidManifest.xml
            fi
          else
            echo "ERREUR: AndroidManifest.xml non trouvé!"
          fi

          # Afficher la structure mise à jour
          echo "Affichage du contenu de AndroidManifest.xml:"
          cat android/app/src/main/AndroidManifest.xml

          echo "Configuration Android mise à jour"

      - name: Build release for Android
        run: flutter build apk --release

      - name: Prepare Android APK for release
        run: |
          mkdir -p release-assets
          # Rechercher l'APK dans différents chemins possibles selon la structure du projet
          echo "Recherche de l'APK..."

          # Chemins possibles pour l'APK
          APK_PATHS=(
            "build/app/outputs/flutter-apk/app-release.apk"
            "build/outputs/flutter-apk/app-release.apk"
            "build/app/outputs/apk/release/app-release.apk"
          )

          APK_FOUND=false
          for path in "${APK_PATHS[@]}"; do
            if [ -f "$path" ]; then
              cp "$path" release-assets/foodguess-${{ needs.check_merge_from_dev.outputs.version }}.apk
              echo "APK trouvé à $path et copié vers release-assets/"
              APK_FOUND=true
              break
            fi
          done

          # Si aucun chemin connu n'est trouvé, rechercher dans tout le répertoire build
          if [ "$APK_FOUND" = false ]; then
            echo "Recherche approfondie de l'APK..."
            APK_PATH=$(find build/ -name "*release*.apk" -type f | head -n 1)
            if [ -n "$APK_PATH" ]; then
              cp "$APK_PATH" release-assets/foodguess-${{ needs.check_merge_from_dev.outputs.version }}.apk
              echo "APK trouvé à $APK_PATH et copié vers release-assets/"
            else
              echo "ERREUR: Impossible de trouver l'APK. La compilation a peut-être échoué."
              echo "Contenu du répertoire build:"
              find build/ -type f -name "*.apk" | sort
              exit 1
            fi
          fi

          ls -la release-assets/

      - name: Setup iOS build environment
        run: |
          echo "Configuration de l'environnement de build pour iOS"
          # Vérification de la structure du dossier iOS
          if [ -d "ios" ]; then
            echo "Dossier iOS trouvé"
            ls -la ios/
          else
            echo "ERREUR: Le dossier iOS n'a pas été trouvé!"
            exit 1
          fi

          # Modification des configurations pour la compatibilité
          echo "Mise à jour des configurations iOS..."
          if [ -f "ios/Flutter/AppFrameworkInfo.plist" ]; then
            echo "AppFrameworkInfo.plist trouvé"
          fi

          # Configuration pour la signature automatique en development (sans certificat)
          echo "Configuration de la signature automatique pour le development..."
          if [ -f "ios/Runner.xcodeproj/project.pbxproj" ]; then
            sed -i 's/ProvisioningStyle = Manual;/ProvisioningStyle = Automatic;/g' ios/Runner.xcodeproj/project.pbxproj || echo "Pas de style de provisionnement manuel trouvé"
            sed -i 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "auto";/g' ios/Runner.xcodeproj/project.pbxproj || echo "Pas d'équipe de développement vide trouvée"
          fi

      - name: Build iOS Archive
        run: |
          echo "Construction de l'archive iOS..."
          # En environnement CI, nous construisons en mode release sans signature
          flutter build ios --release --no-codesign

          # Création d'un IPA sans signature (pour les tests)
          mkdir -p Payload
          cp -r build/ios/iphoneos/Runner.app Payload/
          zip -r release-assets/foodguess-${{ needs.check_merge_from_dev.outputs.version }}-unsigned.ipa Payload
          rm -rf Payload

          echo "Archive iOS créée avec succès"
          ls -la release-assets/

      - name: Build release for Web
        run: flutter build web --release

      - name: Zip Web Build
        run: |
          cd build/web
          zip -r ../../release-assets/foodguess-web-${{ needs.check_merge_from_dev.outputs.version }}.zip .
          cd ../..
          ls -la release-assets/

      # Vérification de l'existence du tag avant de créer la release
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_NAME="v${{ needs.check_merge_from_dev.outputs.version }}"
          echo "Vérification si le tag $TAG_NAME existe déjà..."
          if git ls-remote --tags origin refs/tags/$TAG_NAME | grep -q $TAG_NAME; then
            echo "Le tag $TAG_NAME existe déjà"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Le tag $TAG_NAME n'existe pas encore"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      # Suppression du tag existant si nécessaire pour permettre une nouvelle release
      - name: Delete existing tag if necessary
        if: steps.check_tag.outputs.tag_exists == 'true'
        run: |
          TAG_NAME="v${{ needs.check_merge_from_dev.outputs.version }}"
          echo "Suppression du tag existant $TAG_NAME..."
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -d $TAG_NAME || true
          git push origin :refs/tags/$TAG_NAME || true
          echo "Tag supprimé avec succès."

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check_merge_from_dev.outputs.version }}
          name: Release v${{ needs.check_merge_from_dev.outputs.version }}
          body: |
            # FoodGuess v${{ needs.check_merge_from_dev.outputs.version }}

            Cette version est automatiquement publiée suite au merge de la branche `dev` vers `main`.

            ## Téléchargements
            - [📱 Application Android (APK)](https://github.com/${{ github.repository }}/releases/download/v${{ needs.check_merge_from_dev.outputs.version }}/foodguess-${{ needs.check_merge_from_dev.outputs.version }}.apk)
            - [🍎 Application iOS (IPA non signé)](https://github.com/${{ github.repository }}/releases/download/v${{ needs.check_merge_from_dev.outputs.version }}/foodguess-${{ needs.check_merge_from_dev.outputs.version }}-unsigned.ipa)
            - [🌐 Version Web (ZIP)](https://github.com/${{ github.repository }}/releases/download/v${{ needs.check_merge_from_dev.outputs.version }}/foodguess-web-${{ needs.check_merge_from_dev.outputs.version }}.zip)

            ## Notes de version
            _Consultez l'historique des commits pour plus de détails sur les changements apportés._

            ## Informations techniques
            - Date de construction: ${{ github.event.repository.updated_at }}
            - Flutter: 3.19.0 (stable)
            - Version: ${{ needs.check_merge_from_dev.outputs.version }}
          files: |
            release-assets/foodguess-${{ needs.check_merge_from_dev.outputs.version }}.apk
            release-assets/foodguess-${{ needs.check_merge_from_dev.outputs.version }}-unsigned.ipa
            release-assets/foodguess-web-${{ needs.check_merge_from_dev.outputs.version }}.zip
          draft: false
          prerelease: false
