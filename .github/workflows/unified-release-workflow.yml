name: Build et Release Automatique (Android, iOS, Web)

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  workflow_dispatch:
    inputs:
      version:
        description: "Version à utiliser pour la build (ex: 1.2.3)"
        required: false
        default: ""

# Définition des permissions nécessaires pour le workflow
permissions:
  contents: write # Pour créer des tags et des releases
  actions: read # Pour lire les actions du workflow
  checks: write # Pour écrire des résultats de test
  id-token: write # Nécessaire pour l'authentification des releases

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_release: ${{ steps.check_trigger.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check trigger source
        id: check_trigger
        run: |
          # Ce workflow doit s'exécuter pour tout push sur main, qu'il s'agisse d'un merge ou non
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] || [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Workflow déclenché : déclencheur valide détecté"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "Déclencheur non reconnu"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

          # Affichage d'informations de débogage
          LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Message du dernier commit: $LATEST_COMMIT_MSG"
          echo "Branche courante: ${{ github.ref }}"

      - name: Extract version from pubspec.yaml
        id: get_version
        run: |
          # Si une version est fournie en entrée du workflow, l'utiliser
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Version fournie en entrée: $VERSION"
          else
            # Sinon, extraire la version du pubspec.yaml
            if [ -f "pubspec.yaml" ]; then
              echo "Fichier pubspec.yaml trouvé"
              echo "Premiers 20 lignes du pubspec.yaml:"
              head -n 20 pubspec.yaml
              
              # Extraire la version avec différentes méthodes pour plus de robustesse
              VERSION=$(grep -m 1 "version:" pubspec.yaml | awk '{print $2}' | tr -d '"'"'" | cut -d '+' -f1)
              
              # Vérifier si la version a été extraite correctement
              if [ -z "$VERSION" ]; then
                # Définir une version par défaut si l'extraction échoue
                VERSION="1.0.0"
                echo "Impossible d'extraire la version, utilisation de la valeur par défaut: $VERSION"
              else
                echo "Version extraite avec succès: $VERSION"
              fi
            else
              echo "ERREUR: Le fichier pubspec.yaml n'a pas été trouvé!"
              echo "Contenu du répertoire actuel:"
              ls -la
              # Définir une version par défaut
              VERSION="1.0.0"
              echo "Utilisation de la version par défaut: $VERSION"
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build_android_web:
    needs: check_version
    if: needs.check_version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    outputs:
      artifacts_ready: ${{ steps.artifacts_status.outputs.ready }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.0"
          channel: "stable"

      - name: Display Flutter & Dart versions
        run: |
          flutter --version
          dart --version
          echo "Vérification de la configuration du projet..."

      # Modification temporaire du pubspec.yaml pour la compatibilité
      - name: Ajuster les dépendances pour la compatibilité
        run: |
          # Sauvegarder le pubspec.yaml original
          cp pubspec.yaml pubspec.yaml.bak

          # Ajuster les versions des dépendances pour être compatibles avec la version de Flutter utilisée
          sed -i 's/flutter_lints: \^5.0.0/flutter_lints: \^2.0.0/' pubspec.yaml
          sed -i 's/cupertino_icons: \^1.0.8/cupertino_icons: \^1.0.2/' pubspec.yaml
          sed -i 's/uuid: \^4.4.1/uuid: \^3.0.7/' pubspec.yaml
          sed -i 's/provider: \^6.1.2/provider: \^6.0.5/' pubspec.yaml
          sed -i 's/flutter_launcher_icons: \^0.14.0/flutter_launcher_icons: \^0.13.1/' pubspec.yaml

          # Modifier l'environnement SDK pour être compatible avec Flutter 3.19.0
          sed -i "s/sdk: '>=2.19.0 <4.0.0'/sdk: '>=3.2.0 <4.0.0'/" pubspec.yaml

          # Afficher le contenu modifié
          echo "Contenu du pubspec.yaml modifié:"
          cat pubspec.yaml

      - name: Fix ColorScheme in main.dart
        run: |
          echo "Correction du ColorScheme dans main.dart pour ajouter les paramètres requis..."
          # Vérifier si les paramètres background et onBackground sont déjà présents
          if ! grep -q "background:" lib/main.dart || ! grep -q "onBackground:" lib/main.dart; then
            # Sauvegarder le fichier original
            cp lib/main.dart lib/main.dart.bak
            
            # Ajouter les paramètres manquants au ColorScheme
            sed -i '/surface: AppColors.beigeLight,/a\\          background: AppColors.beigeLight,\n          onBackground: Colors.black87,' lib/main.dart
            
            echo "ColorScheme mis à jour avec les paramètres requis."
            grep -A 15 "colorScheme:" lib/main.dart
          else
            echo "ColorScheme semble déjà contenir les paramètres requis."
          fi

      - name: Install dependencies
        run: flutter pub get

      - name: Fix Android project structure
        run: |
          echo "Mise à jour de la structure du projet Android pour la compatibilité"

          # Sauvegarde du code et des ressources existants
          echo "Sauvegarde des fichiers importants..."
          mkdir -p /tmp/backup
          cp -r lib /tmp/backup/
          cp -r assets /tmp/backup/
          cp pubspec.yaml /tmp/backup/

          # Créer un nouveau projet temporaire avec la structure correcte
          echo "Création d'un nouveau projet Flutter avec la structure à jour..."
          cd ..
          flutter create --project-name food_guess --org com.example.foodguess temporary_project

          # Restaurer les fichiers de l'ancien projet dans le nouveau
          echo "Restauration du code et des ressources dans le nouveau projet..."
          rm -rf temporary_project/lib
          cp -r /tmp/backup/lib temporary_project/
          cp -r /tmp/backup/assets temporary_project/
          cp /tmp/backup/pubspec.yaml temporary_project/

          # Remplacer l'ancien projet par le nouveau
          echo "Remplacement de l'ancien projet par le nouveau..."
          cp -r temporary_project/android/* food_guess/android/

          # Revenir au dossier du projet
          cd food_guess

          echo "Structure du projet Android mise à jour"
          ls -la android/

      - name: Update Android configuration
        run: |
          echo "Mise à jour de la configuration Android"

          # Assurer la compatibilité des fichiers de configuration
          echo "android.useAndroidX=true" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties

          # Vérifier que le fichier AndroidManifest.xml existe et contient l'embedding v2
          if [ -f "android/app/src/main/AndroidManifest.xml" ]; then
            echo "AndroidManifest.xml trouvé, vérification de la configuration d'embedding..."
            
            # Assurer que le fichier contient la métadonnée flutterEmbedding
            if ! grep -q "flutterEmbedding" android/app/src/main/AndroidManifest.xml; then
              echo "Ajout de la métadonnée flutterEmbedding..."
              sed -i '/<\/application>/i \        <meta-data android:name="flutterEmbedding" android:value="2" \/>' android/app/src/main/AndroidManifest.xml
            fi
          else
            echo "ERREUR: AndroidManifest.xml non trouvé!"
          fi

          # Afficher la structure mise à jour
          echo "Affichage du contenu de AndroidManifest.xml:"
          cat android/app/src/main/AndroidManifest.xml

          echo "Configuration Android mise à jour"

      - name: Build release for Android
        run: flutter build apk --release

      - name: Prepare Android APK for release
        run: |
          mkdir -p release-assets
          # Rechercher l'APK dans différents chemins possibles selon la structure du projet
          echo "Recherche de l'APK..."

          # Chemins possibles pour l'APK
          APK_PATHS=(
            "build/app/outputs/flutter-apk/app-release.apk"
            "build/outputs/flutter-apk/app-release.apk"
            "build/app/outputs/apk/release/app-release.apk"
          )

          APK_FOUND=false
          for path in "${APK_PATHS[@]}"; do
            if [ -f "$path" ]; then
              cp "$path" release-assets/foodguess-${{ needs.check_version.outputs.version }}.apk
              echo "APK trouvé à $path et copié vers release-assets/"
              APK_FOUND=true
              break
            fi
          done

          # Si aucun chemin connu n'est trouvé, rechercher dans tout le répertoire build
          if [ "$APK_FOUND" = false ]; then
            echo "Recherche approfondie de l'APK..."
            APK_PATH=$(find build/ -name "*release*.apk" -type f | head -n 1)
            if [ -n "$APK_PATH" ]; then
              cp "$APK_PATH" release-assets/foodguess-${{ needs.check_version.outputs.version }}.apk
              echo "APK trouvé à $APK_PATH et copié vers release-assets/"
            else
              echo "ERREUR: Impossible de trouver l'APK. La compilation a peut-être échoué."
              echo "Contenu du répertoire build:"
              find build/ -type f -name "*.apk" | sort
              exit 1
            fi
          fi

          ls -la release-assets/

      - name: Build release for Web
        run: flutter build web --release

      - name: Zip Web Build
        run: |
          cd build/web
          zip -r ../../release-assets/foodguess-web-${{ needs.check_version.outputs.version }}.zip .
          cd ../..
          ls -la release-assets/

      - name: Upload Android & Web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-web-builds
          path: release-assets/*
          retention-days: 1

      - name: Set artifacts status
        id: artifacts_status
        run: echo "ready=true" >> $GITHUB_OUTPUT

  build_ios:
    needs: check_version
    if: needs.check_version.outputs.should_release == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.0"
          channel: "stable"

      - name: Display Flutter & Dart versions
        run: |
          flutter --version
          dart --version

      - name: Ajuster les dépendances pour la compatibilité
        run: |
          # Sauvegarder le pubspec.yaml original
          cp pubspec.yaml pubspec.yaml.bak

          # Méthode compatible avec macOS pour modifier pubspec.yaml
          echo "Modification des dépendances pour la compatibilité avec Flutter 3.19.0..."

          # Utiliser awk qui est plus compatible entre les systèmes
          cat pubspec.yaml | awk '
            /^  flutter_lints:/ { print "  flutter_lints: ^2.0.0"; next }
            /^  cupertino_icons:/ { print "  cupertino_icons: ^1.0.2"; next }
            /^  uuid:/ { print "  uuid: ^3.0.7"; next }
            /^  provider:/ { print "  provider: ^6.0.5"; next }
            /^  flutter_launcher_icons:/ { print "  flutter_launcher_icons: ^0.13.1"; next }
            { print }
          ' > pubspec.yaml.new

          if [ -f "pubspec.yaml.new" ]; then
            mv pubspec.yaml.new pubspec.yaml
            echo "Dépendances mises à jour avec succès."
            echo "Contenu du pubspec.yaml mis à jour:"
            cat pubspec.yaml
          else
            echo "ERREUR: La modification du pubspec.yaml a échoué."
            exit 1
          fi

      - name: Install dependencies
        run: flutter pub get

      - name: Build iOS Archive
        run: |
          echo "Construction de l'archive iOS pour la version ${{ needs.check_version.outputs.version }}..."

          # Mise à jour de CocoaPods
          cd ios && pod repo update && cd ..

          # Préparation de l'environnement Xcode
          flutter build ios --release --no-codesign

          # Vérification du chemin du build
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            echo "Répertoire Runner.app trouvé dans build/ios/iphoneos/"
          else
            echo "Recherche du chemin du Runner.app..."
            find build -name "Runner.app" -type d
          fi

          # Création d'un IPA sans signature
          mkdir -p Payload
          cp -r build/ios/iphoneos/Runner.app Payload/
          mkdir -p release-assets
          zip -r release-assets/foodguess-${{ needs.check_version.outputs.version }}-unsigned.ipa Payload
          rm -rf Payload

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: release-assets/*.ipa
          retention-days: 1

  create_unified_release:
    needs: [check_version, build_android_web, build_ios]
    if: needs.check_version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release directory
        run: mkdir -p release-assets

      - name: Download Android & Web artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-web-builds
          path: release-assets

      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: release-assets

      - name: List release assets
        run: |
          echo "Contenu du dossier release-assets:"
          ls -la release-assets/

      # Vérification de l'existence du tag avant de créer la release
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_NAME="v${{ needs.check_version.outputs.version }}"
          echo "Vérification si le tag $TAG_NAME existe déjà..."
          if git ls-remote --tags origin refs/tags/$TAG_NAME | grep -q $TAG_NAME; then
            echo "Le tag $TAG_NAME existe déjà"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Le tag $TAG_NAME n'existe pas encore"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      # Suppression du tag existant si nécessaire pour permettre une nouvelle release
      - name: Delete existing tag if necessary
        if: steps.check_tag.outputs.tag_exists == 'true'
        run: |
          TAG_NAME="v${{ needs.check_version.outputs.version }}"
          echo "Suppression du tag existant $TAG_NAME..."
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -d $TAG_NAME || true
          git push origin :refs/tags/$TAG_NAME || true
          echo "Tag supprimé avec succès."

      - name: Create Unified Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check_version.outputs.version }}
          name: FoodGuess v${{ needs.check_version.outputs.version }}
          body: |
            # FoodGuess v${{ needs.check_version.outputs.version }} - Release Unifiée

            Cette version est publiée automatiquement avec tous les binaires (Android, iOS et Web) dans la même release.

            ## Téléchargements
            - [📱 Application Android (APK)](https://github.com/${{ github.repository }}/releases/download/v${{ needs.check_version.outputs.version }}/foodguess-${{ needs.check_version.outputs.version }}.apk)
            - [🍎 Application iOS (non signée)](https://github.com/${{ github.repository }}/releases/download/v${{ needs.check_version.outputs.version }}/foodguess-${{ needs.check_version.outputs.version }}-unsigned.ipa)
            - [🌐 Version Web (ZIP)](https://github.com/${{ github.repository }}/releases/download/v${{ needs.check_version.outputs.version }}/foodguess-web-${{ needs.check_version.outputs.version }}.zip)

            ## Notes
            La version iOS n'est pas signée et ne peut pas être installée directement sur des appareils iOS.
            Pour installer l'application iOS, vous devez la signer avec votre propre certificat de développeur.

            ## Informations techniques
            - Date de construction: ${{ github.event.repository.updated_at }}
            - Flutter: 3.19.0 (stable)
            - Version: ${{ needs.check_version.outputs.version }}
          files: |
            release-assets/foodguess-${{ needs.check_version.outputs.version }}.apk
            release-assets/foodguess-${{ needs.check_version.outputs.version }}-unsigned.ipa
            release-assets/foodguess-web-${{ needs.check_version.outputs.version }}.zip
          draft: false
          prerelease: false
